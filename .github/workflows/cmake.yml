name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - name: Install Build Dependencies
      run: sudo apt install -y gperf 
      
    - uses: actions/checkout@v2
      with:
          submodules: recursive

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build
      
    - uses: actions/cache@v2.1.5
      id: cache
      with:
        path: ${{github.workspace}}/build
        key: ${{ runner.os }}-cmake-${{ hashFiles('CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-cmake-${{ hashFiles('CMakeLists.txt') }}

    - name: Configure CMake
      if: steps.cache.outputs.cache-hit != 'true'
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake ${{github.workspace}} -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE
      
    - name: Upload a Build Artifact  
      uses: actions/upload-artifact@v2.2.3
      with:
        name: telegram-bot-api
        path: ${{github.workspace}}/build/telegram-bot-api
      
  docker:
     needs: build
     runs-on: ubuntu-latest
     
     steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        
      - name: Download a Build Artifact
        uses: actions/download-artifact@v2.0.9
        with:
          name: telegram-bot-api
          path: ${{github.workspace}}/docker/telegram-bot-api
          
      - name: Create Dockerfile
        run: |
          cat << EOF >> Dockerfile
          FROM alpine:latest
          WORKDIR /app
          COPY ./telegram-bot-api /app/telegram-bot-api
          
      - name: Build and Push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ghcr.io/${{github.actor}}/${{github.repository}}:latest
          
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
        
